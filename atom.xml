<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LYJC</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lyjc.github.io/"/>
  <updated>2019-12-14T19:53:02.652Z</updated>
  <id>http://lyjc.github.io/</id>
  
  <author>
    <name>Song</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spark—pivot 透视</title>
    <link href="http://lyjc.github.io/2019/12/14/pivot/"/>
    <id>http://lyjc.github.io/2019/12/14/pivot/</id>
    <published>2019-12-14T13:10:48.561Z</published>
    <updated>2019-12-14T19:53:02.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spark学习之Pivot"><a href="#spark学习之Pivot" class="headerlink" title="spark学习之Pivot"></a>spark学习之Pivot</h1><h3 id="1，先看一下源数据"><a href="#1，先看一下源数据" class="headerlink" title="1，先看一下源数据"></a>1，先看一下源数据</h3><p>scala代码，生成模拟数据。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">val</span> data = <span class="type">Seq</span>(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191214"</span> , <span class="string">"产品3"</span> , <span class="number">13</span> , <span class="number">4</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191214"</span> , <span class="string">"产品2"</span> , <span class="number">10</span> , <span class="number">3</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191214"</span> , <span class="string">"产品3"</span> , <span class="number">13</span> , <span class="number">3</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191214"</span> , <span class="string">"产品4"</span> , <span class="number">12</span> , <span class="number">2</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191213"</span> , <span class="string">"产品1"</span> , <span class="number">15</span> , <span class="number">2</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191213"</span> , <span class="string">"产品2"</span> , <span class="number">10</span> , <span class="number">3</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191213"</span> , <span class="string">"产品3"</span> , <span class="number">13</span> , <span class="number">4</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     <span class="type">Row</span>(<span class="string">"20191213"</span> , <span class="string">"产品1"</span> , <span class="number">15</span> , <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">val</span> df = spark.createDataFrame(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     spark.sparkContext.parallelize(data , <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     ,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">     <span class="type">StructType</span>(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">       <span class="type">Array</span>(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">         <span class="type">StructField</span>(<span class="string">"ymd"</span> , <span class="type">StringType</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">         <span class="type">StructField</span>(<span class="string">"item"</span> , <span class="type">StringType</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">         <span class="type">StructField</span>(<span class="string">"price"</span> , <span class="type">IntegerType</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">         <span class="type">StructField</span>(<span class="string">"cnt"</span> , <span class="type">IntegerType</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">       )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">     )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">   )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">df.show()</span></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>ymd</th><th>item</th><th>price</th><th>cnt</th></tr></thead><tbody><tr><td>20191214</td><td>产品3</td><td>13</td><td>4</td></tr><tr><td>20191214</td><td>产品2</td><td>10</td><td>3</td></tr><tr><td>20191214</td><td>产品3</td><td>13</td><td>3</td></tr><tr><td>20191214</td><td>产品4</td><td>12</td><td>2</td></tr><tr><td>20191213</td><td>产品1</td><td>15</td><td>2</td></tr><tr><td>20191213</td><td>产品2</td><td>10</td><td>3</td></tr><tr><td>20191213</td><td>产品3</td><td>13</td><td>4</td></tr><tr><td>20191213</td><td>产品1</td><td>15</td><td>1</td></tr></tbody></table><h2 id="2，第一个透视"><a href="#2，第一个透视" class="headerlink" title="2，第一个透视"></a>2，第一个透视</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> df2 = df</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     .groupBy(<span class="string">"ymd"</span> )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     .pivot(<span class="string">"item"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     .agg(sum(col(<span class="string">"price"</span>)*col(<span class="string">"cnt"</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     .na.fill(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     .orderBy(<span class="string">"ymd"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     .drop(<span class="string">"item"</span>)</span></pre></td></tr></table></figure><ul><li><p>这段代码先按照 ymd 分组，然后透视了每组里面的 item 组织成了右边的列，然后聚合函数操作生成了dataframe。</p></li><li><p>注意：</p><ol><li>先分组</li><li>透视需要展开的列</li><li>聚合函数操作的结果影响的是每一个单元格</li></ol></li><li><p>简单说明：</p><ol><li><p>此功能按天查看了每个产品的总的流水</p><p>13号，只有产品1，2，3</p><p>14号，只有产品2，3，4</p><p>透视 item 后展开的列是全集，即产品1，2，3，4</p></li><li><p>聚合函数的功能是对 price列* cnt列的求积后求和</p><p>注意观察，是对每个组中的不同的 pivot 的值的操作，相当于是groupby( ymd , item) </p><blockquote><p>结果1：</p></blockquote></li></ol></li></ul><table><thead><tr><th>ymd</th><th>产品1</th><th>产品2</th><th>产品3</th><th>产品4</th></tr></thead><tbody><tr><td>20191213</td><td>45</td><td>30</td><td>52</td><td>0</td></tr><tr><td>20191214</td><td>0</td><td>30</td><td>91</td><td>24</td></tr></tbody></table><hr><h3 id="结合下面的代码在体会一下-pivot-和-groupby-的关系"><a href="#结合下面的代码在体会一下-pivot-和-groupby-的关系" class="headerlink" title="结合下面的代码在体会一下 pivot 和 groupby 的关系"></a>结合下面的代码在体会一下 pivot 和 groupby 的关系</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> df3 = df.groupBy(<span class="string">"ymd"</span> , <span class="string">"item"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">       .pivot(<span class="string">"item"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">       .agg(sum(col(<span class="string">"price"</span>)*col(<span class="string">"cnt"</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">       .na.fill(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">       .orderBy(<span class="string">"ymd"</span> , <span class="string">"item"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       .drop(<span class="string">"ymd"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   df3.show()</span></pre></td></tr></table></figure><blockquote><p>上面的代码直接按照 ymd 和 item 进行分组，然后 pivot 之后聚合。</p><p>结果2：</p></blockquote><table><thead><tr><th>item</th><th>产品1</th><th>产品2</th><th>产品3</th><th>产品4</th></tr></thead><tbody><tr><td>20191213</td><td>45</td><td>0</td><td>0</td><td>0</td></tr><tr><td>20191213</td><td>0</td><td>30</td><td>0</td><td>0</td></tr><tr><td>20191213</td><td>0</td><td>0</td><td>52</td><td>0</td></tr><tr><td>20191214</td><td>0</td><td>30</td><td>0</td><td>0</td></tr><tr><td>20191214</td><td>0</td><td>0</td><td>91</td><td>0</td></tr><tr><td>20191214</td><td>0</td><td>0</td><td>0</td><td>24</td></tr></tbody></table><p><strong>注意观察上面的结果1 和 2，计算的数值一样，但是 2 的计算过程中是按照两列分组，而 1 是 ymd 一列分组，所以记录数不一样，对应后面的透视的聚合点（单元格）位置也就不一样。</strong></p><h2 id="2，简单练习"><a href="#2，简单练习" class="headerlink" title="2，简单练习"></a>2，简单练习</h2><p>按照产品分别查看不同日期的流水</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> df4 = df</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     .groupBy( <span class="string">"item"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     .pivot(<span class="string">"ymd"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     .agg(sum(col(<span class="string">"price"</span>)*col(<span class="string">"cnt"</span>)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     .na.fill(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     .orderBy( <span class="string">"item"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     .drop(<span class="string">"ymd"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">df4.show()</span></pre></td></tr></table></figure><blockquote><p>结果3：</p></blockquote><table><thead><tr><th>item</th><th>20191213</th><th>20191214</th></tr></thead><tbody><tr><td>产品1</td><td>45</td><td>0</td></tr><tr><td>产品2</td><td>30</td><td>30</td></tr><tr><td>产品3</td><td>52</td><td>91</td></tr><tr><td>产品4</td><td>0</td><td>24</td></tr></tbody></table><h2 id="3，反透视"><a href="#3，反透视" class="headerlink" title="3，反透视"></a>3，反透视</h2><p>透视本质上是将不同行的信息转化到列上了，同时支持了聚合操作。那么如果想要从列的信息返回行级的信息呢？就需要用到反透视了。</p><p><strong>已上面的 df2 来演示反透视。</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpivot</span></span>(df:<span class="type">DataFrame</span> , groupCol:<span class="type">String</span> , v1Col:<span class="type">String</span> , v2Col:<span class="type">String</span>):<span class="type">DataFrame</span>=&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> cols = df.columns</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> sql = <span class="string">s"stack(<span class="subst">$&#123;cols.length-1&#125;</span> "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    cols.foreach(x=&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!x.equals(groupCol))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        sql += (<span class="string">s", '<span class="subst">$&#123;x&#125;</span>' ,`<span class="subst">$&#123;x&#125;</span>`"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    sql += (<span class="string">s") as (`<span class="subst">$&#123;v1Col&#125;</span>` , `<span class="subst">$&#123;v2Col&#125;</span>`)"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    df.selectExpr(groupCol , sql)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">unpivot(df2 , <span class="string">"ymd"</span> , <span class="string">"item"</span> , <span class="string">"ls"</span>).show()</span></pre></td></tr></table></figure><blockquote><p>结果4：</p><table><thead><tr><th>ymd</th><th>item</th><th>ls</th></tr></thead><tbody><tr><td>20191213</td><td>产品1</td><td>45</td></tr><tr><td>20191213</td><td>产品2</td><td>30</td></tr><tr><td>20191213</td><td>产品3</td><td>52</td></tr><tr><td>20191213</td><td>产品4</td><td>0</td></tr><tr><td>20191214</td><td>产品1</td><td>0</td></tr><tr><td>20191214</td><td>产品2</td><td>30</td></tr><tr><td>20191214</td><td>产品3</td><td>91</td></tr><tr><td>20191214</td><td>产品4</td><td>24</td></tr></tbody></table></blockquote><ul><li>上面的反透视采用了 sql 的写法。</li><li>观察后思考不难得出先透视后反的话是无法保证数据的复原的，除非透视聚合的时候完整保留信息。</li><li>透视和反透视应用广泛，但是对之特别多的时候慎重，以免列过多造成卡死。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spark学习之Pivot&quot;&gt;&lt;a href=&quot;#spark学习之Pivot&quot; class=&quot;headerlink&quot; title=&quot;spark学习之Pivot&quot;&gt;&lt;/a&gt;spark学习之Pivot&lt;/h1&gt;&lt;h3 id=&quot;1，先看一下源数据&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="pivot" scheme="http://lyjc.github.io/categories/pivot/"/>
    
      <category term="spark" scheme="http://lyjc.github.io/categories/pivot/spark/"/>
    
    
      <category term="scala" scheme="http://lyjc.github.io/tags/scala/"/>
    
      <category term="透视" scheme="http://lyjc.github.io/tags/%E9%80%8F%E8%A7%86/"/>
    
      <category term="pivot" scheme="http://lyjc.github.io/tags/pivot/"/>
    
      <category term="spark" scheme="http://lyjc.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>git+hexo博客</title>
    <link href="http://lyjc.github.io/2019/12/12/Gitpage+hexo%E5%88%B6%E4%BD%9C%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lyjc.github.io/2019/12/12/Gitpage+hexo%E5%88%B6%E4%BD%9C%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-12-12T15:20:25.080Z</published>
    <updated>2019-12-12T16:03:31.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Gitpage博客教程"><a href="#Hexo-Gitpage博客教程" class="headerlink" title="Hexo+Gitpage博客教程"></a>Hexo+Gitpage博客教程</h1><h2 id="1，注册Github"><a href="#1，注册Github" class="headerlink" title="1，注册Github"></a>1，<a href="https://github.com/" target="_blank" rel="noopener">注册Github</a></h2><p>github不多说了，网上关于git博客制作需要注意的教程和资料很多，新建一个仓库仓库地址为用户名.github.io这个仓库需要公开等，详情搜索Gitpage。注意本地最好安装有gitbash。</p><h2 id="2，下载NodeJS"><a href="#2，下载NodeJS" class="headerlink" title="2，下载NodeJS"></a>2，<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载NodeJS</a></h2><p><strong>一定要下载nodejs</strong> 这是重点，下载安装也不多说了，地址在标题上。</p><h2 id="3，登陆Hexo"><a href="#3，登陆Hexo" class="headerlink" title="3，登陆Hexo"></a>3，登陆<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></h2><p><strong>–任意目录下执行 npm install hexo-cli -g （最好在gitbash命令行中）用于安装hexo–</strong></p><p>1，到一个以后准备当作博客根据地的目录下</p><p>2，进入gitbash</p><p>3，执行【hexo init .】，会将 blog 文件夹初始化成为 hexo的博客文件夹。此时目录下会有很多文件夹和文件，重点说一下source,themes,_config.yml</p><p>​    *<em>source : *</em>之后写博客的目录。</p><p>​    *<em>themes : *</em>下载的博客风格的目录。</p><p>​    *<em>_config.yml : *</em>这个文件是整个博客的配置信息所在。</p><p>4，执行【npm install】多出了node_modules文件夹，是与package.json相关的用处，与依赖相关。</p><p>5，执行【hexo server】开启hexo服务。</p><p>关于hexo的详细信息请<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">参考</a></p><h2 id="4，hexo选择风格"><a href="#4，hexo选择风格" class="headerlink" title="4，hexo选择风格"></a>4，<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo</a>选择风格</h2><p>在这个页面中点击图片会跳转预览，点击风格名会跳转到git地址。在git中一般会有关于这个风格的部署和配置的介绍。然后需要git clone所需要的风格项目。一般按照里面的配置就好了。</p><h2 id="5，hexo常用命令"><a href="#5，hexo常用命令" class="headerlink" title="5，hexo常用命令"></a>5，hexo常用命令</h2><p>*<em>hexo g : *</em>生成页面</p><p>*<em>hexo d : *</em>部署到git上</p><p>*<em>hexo s : *</em>本地模拟服务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-Gitpage博客教程&quot;&gt;&lt;a href=&quot;#Hexo-Gitpage博客教程&quot; class=&quot;headerlink&quot; title=&quot;Hexo+Gitpage博客教程&quot;&gt;&lt;/a&gt;Hexo+Gitpage博客教程&lt;/h1&gt;&lt;h2 id=&quot;1，注册Githu
      
    
    </summary>
    
    
      <category term="博客" scheme="http://lyjc.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="git" scheme="http://lyjc.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://lyjc.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>初识scala</title>
    <link href="http://lyjc.github.io/2019/12/09/Scala%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://lyjc.github.io/2019/12/09/Scala%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2019-12-08T16:06:26.842Z</published>
    <updated>2019-12-08T16:37:04.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><h3 id="下载安装scala去官网下载"><a href="#下载安装scala去官网下载" class="headerlink" title="下载安装scala去官网下载"></a>下载安装scala<a href="https://www.scala-lang.org/" target="_blank" rel="noopener">去官网下载</a></h3><p>具体安装细节不做解释网上教程挺多的。笔者是使用idea编辑器下载scala支持插件开发学习scala。</p><h3 id="scala语言的HelloWorld"><a href="#scala语言的HelloWorld" class="headerlink" title="scala语言的HelloWorld"></a>scala语言的HelloWorld</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">First</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        println(<span class="string">"Hello world,scala"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>直接粘贴进入idea即可运行。</p><h3 id="代码结构初识"><a href="#代码结构初识" class="headerlink" title="代码结构初识"></a>代码结构初识</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">First</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>暂时先理解scala中的object是一个完全静态的类所有方法变量全是静态的，class只能是实体类型不能静态化。以后再详细说明object和class的区别。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在scala中 <strong>def</strong>  表示声明一个方法，因为在object中所以方法是静态的。学过java的都知道静态的main函数自然是主函数了。再看主函数参数在java中  <strong>String[] args</strong>在这里写成了<strong>args:Array[String]</strong>。原因在于scala中是将变量的类型写在变量名后面的中间用 ：分开。而Array是scala中数组的表示，到了scala集合部分在细谈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">println(&quot;Hello world,scala&quot;)</span></pre></td></tr></table></figure><p>println是scala中默认环境的函数，不用声明类（似于java中的lang包），用于标准输出，对应的还有printf。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Scala&quot;&gt;&lt;a href=&quot;#Scala&quot; class=&quot;headerlink&quot; title=&quot;Scala&quot;&gt;&lt;/a&gt;Scala&lt;/h2&gt;&lt;h3 id=&quot;下载安装scala去官网下载&quot;&gt;&lt;a href=&quot;#下载安装scala去官网下载&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="scala" scheme="http://lyjc.github.io/categories/scala/"/>
    
    
      <category term="scala" scheme="http://lyjc.github.io/tags/scala/"/>
    
      <category term="java" scheme="http://lyjc.github.io/tags/java/"/>
    
      <category term="大数据" scheme="http://lyjc.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
